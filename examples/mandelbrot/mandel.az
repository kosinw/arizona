/** Imports from outside module **/
use fn clamp(x: f64, min: f64, max: f64) -> f64 from "env";
use fn log2(x: f64) -> f64 from "Math";
use fn log(x: f64) -> f64 from "Math";
use fn min(a: i32, b: i32) -> i32 from "env";
use fn logi(x: i32) -> void from "env";

/** Number of discrete color values on the JS side. */
const NUM_COLORS: i32 = 2048;

/** Updates the rectangle `width` x `height`. */
export fn update(width: i32, height: i32, limit: i32) {
  let translateX: f64 = width  * (1.0 / 1.6);
  let translateY: f64 = height * (1.0 / 2.0);
  let scale: f64 = 10.0 / min(3 * width, 4 * height);
  let realOffset: f64 = translateX * scale;
  let invLimit: f64 = 1.0 / limit;

  let minIterations: i32 = min(8, limit);

  for (let y: i32 = 0; y < height; y += 1) {
    let imaginary: f64 = (y - translateY) * scale;
    let yOffset: i32   = (y * width) << 1;

    for (let x: i32 = 0; x < width; x += 1) {
      let real: f64 = x * scale - realOffset;

      // Iterate until either the escape radius or iteration limit is exceeded
      let ix: f64 = 0.0;
      let iy: f64 = 0.0;
      let iteration: i32 = 0;

      let ixSq: f64 = 0;
      let iySq: f64 = 0;

      while ((ix * ix) + (iy * iy) <= 4.0) {
        ixSq = ix * ix;
        iySq = iy * iy;
        iy = 2.0 * ix * iy + imaginary;
        ix = ixSq - iySq + real;
        if (iteration >= limit) { break; }
        iteration += 1;
      }

      // Do a few extra iterations for quick escapes to reduce error margin
      while (iteration < minIterations) {
        let ixNew: f64 = ix * ix - iy * iy + real;
        iy = 2.0 * ix * iy + imaginary;
        ix = ixNew;
        iteration += 1;
      }

      // Iteration count is a discrete value in the range [0, limit] here, but we'd like it to be
      // normalized in the range [0, 2047] so it maps to the gradient computed in JS.
      // see also: http://linas.org/art-gallery/escape/escape.html
      let colorIndex: i32 = NUM_COLORS - 1;
      let distanceSq: f64 = ix * ix + iy * iy;
      if (distanceSq > 1.0) {
        let fraction: f64 = log2(0.5 * log(distanceSq));
        colorIndex = <i32>((NUM_COLORS - 1) * clamp((iteration + 1 - fraction) * invLimit, 0.0, 1.0));
      }
      store16(yOffset + (x << 1), colorIndex);
    }
  }
}
